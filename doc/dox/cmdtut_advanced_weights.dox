// This file is part of LatNet Builder.
//
// Copyright (C) 2012-2018  Pierre L'Ecuyer and Universite de Montreal
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/** \page cmdtut_advanced_weights Weights

This page describes how 
\ref feats_weights "weights" can be specified depending on their type.

Note that the weights in the following examples are interpreted as weights
elevated to a power \f$p\f$ because, by default, the numerical values read by LatNet Builder are
interpreted as the constants \f$\gamma_{\mathfrak u}^p\f$, i.e. the weights
elevated to the power \f$p\f$ matching the choice of the \f$\ell_q\f$-norm.
The choice of this norm is made using <code>--norm-type <var>q</var></code>.
An exception to this occurs when using the infinity-norm, where they are
interpreted as if \f$p = 1\f$.
To interpret the numerical values as another power of the weights, say 1, the
option
\verbatim
  --weights-power 1
\endverbatim
must be added to the command line. 

\section cmdtut_advanced_weights_projdep Projection-Dependent Weights

In that case, the value of the <code>--weights</code> option consists of 
colon-separated tokens: the first is the type of weights (projection-dependent); 
the other tokens are optional and assign explicit weights to projections. Projections
for which no weights have been explicitly assigned have a weight equal to zero.

- Projection-dependent weights with \f$\gamma_{\{1,2,3\}}^p = 0.7\f$,
  \f$\gamma_{\{1,2,4\}}^p = 0.5\f$, \f$\gamma_{\{2,3,4\}}^p = 0.3\f$ and
  \f$\gamma_{\mathfrak u}^p = 0\f$ otherwise:
  \verbatim
  --weights projection-dependent:1,2,3:0.7:1,2,4:0.5:2,3,4:0.3
  \endverbatim

Alternatively, projection-dependent weights can be specified in a text file, 
say <tt>weights.txt</tt>, with a
content similar to the following:
\verbatim
# this is a comment
1,2,3:      0.7
1,2,4:      0.5
2,3,4:      0.3
order 2:    1.0
order 3:    0.1
default:    1.0e-3
\endverbatim
This assigns the weights 0.7, 0.5 and 0.3 to projections \f$\{1,2,3\}\f$,
\f$\{1,2,4\}\f$ and \f$\{2,3,4\}\f$, respectively, a weight of 1.0 to
every projection of order 2, a weight of 0.1 to every projection of order
3 other than the above three for which weights were explicitly assigned, then a weight of \f$10^{-3}\f$ to every other projection.
These numerical values are interpreted using the \f$p\f$ power mentioned above.
The order of the lines in the file is not important.
LatNet Builder must be told where to look for the weights by changing the 
<code>--weights</code> option to 
\verbatim
  --weights file:weights.txt
\endverbatim
The first colon-separated token indicates that the weights
should be read from a file, and the second one, the (relative or absolute) path to 
the file to read.

\section cmdtut_advanced_weights_orderdep Order-Dependent Weights

In that case, the value of the <code>--weights</code> option consists of three 
colon-separated tokens: the first is the type of weights (order-dependent
weights); the second is the default weight assigned to projection orders for
which no weight is explicitly given; the last token is optional and is a
comma-separated list of order-dependent weights \f$\Gamma_1,\dots,\Gamma_k\f$ for
some \f$k\f$.

- Order-dependent weights with \f$\Gamma_k^p = 0.3\f$ for all \f$k\f$:
  \verbatim
  --weights order-dependent:0.3
  \endverbatim

- Order-dependent weights with \f$\Gamma_1^p = 1.0\f$, \f$\Gamma_2^p = 0.7\f$,
  \f$\Gamma_3^p = 0.3\f$ and \f$\Gamma_k^p = 0.1\f$ for all \f$k \geq 4\f$:
  \verbatim
  --weights order-dependent:0.1:1.0,0.7,0.3
  \endverbatim


\section cmdtut_advanced_weights_product Product Weights
In that case, the value of the <code>--weights</code> option consists of three 
colon-separated tokens: the first is the type of weights (product
weights); the second is the default weight assigned to coordinates for
which no weight is explicitly given; the last token is optional and is a
comma-separated list of coordinate weights \f$\gamma_1,\dots,\gamma_j\f$ for
some \f$j\f$.

- Product weights with \f$\gamma_j^p = 0.3\f$ for all \f$j\f$:
  \verbatim
  --weights product:0.3
  \endverbatim

- Product weights with \f$\gamma_1^p = 1.0\f$, \f$\gamma_2^p = 0.7\f$, \f$\gamma_3^p =
  0.3\f$ and \f$\gamma_j^p = 0.1\f$ for all \f$j \geq 4\f$:
  \verbatim
  --weights product:0.1:1.0,0.7,0.3
  \endverbatim


\section cmdtut_advanced_weights_pod POD Weights

In that case, the value of the <code>--weights</code> option consists of five 
colon-separated tokens: the first is the type of weights (POD), the next two
specify the \f$\Gamma_k\f$'s as in \ref
cmdtut_advanced_weights_orderdep, and the last two specify the \f$\gamma_j\f$'s
as in \ref cmdtut_advanced_weights_product.

- POD weights with \f$\Gamma_1^p = 1.0\f$, \f$\Gamma_2^p = 0.7\f$,
  \f$\Gamma_3^p = 0.3\f$ and \f$\Gamma_k^p = 0.1\f$ for all \f$k \geq 4\f$,
  and with \f$\gamma_1^p = 1.0\f$, \f$\gamma_2^p = 0.9\f$, \f$\gamma_3^p =
  0.7\f$ and \f$\gamma_j^p = 0.5\f$ for all \f$j \geq 4\f$:
  \verbatim
  --weights POD:0.1:1.0,0.7,0.3:0.5:1.0,0.9,0.7
  \endverbatim

\section cmdtut_advanced_weights_combined Combined Weights

Additionally, one can specify several types of weights as a space separated
list of weights descriptions. The weight of a projection
will the sum of the specified weights.

- Combined weights with \f$ \gamma_{\mathfrak u}^p = \Gamma_{|\mathfrak u|}^p + \prod_{j \in \mathfrak u} \gamma^p_j \f$
  with the order-dependent weights \f$ \Gamma \f$ and the product weights \f$ \gamma \f$ defined above in \ref cmdtut_advanced_weights_pod :
  \verbatim
  --weights product:0.1:1.0,0.7,0.3 order-dependent:0.1:1.0,0.7,0.3
  \endverbatim

*/
vim: ft=doxygen spelllang=en spell