#include <vector>
#include <math.h>
#include <iostream>

typedef std::vector<bool> Polynomial;
typedef std::vector<std::vector<bool>> BinaryMatrix;

unsigned int getmsb (unsigned long long x){
    unsigned int r = 0;
    if (x < 1) return 0;
    while (x >>= 1) r++;
    return r;
}

unsigned int numPoints(const BinaryMatrix& matrix){
    return pow(2, matrix[0].size());
}

std::vector<unsigned long> getColsReverse(const BinaryMatrix& matrix){
    std::vector<unsigned long> res(matrix[0].size(), 0);
    for (unsigned int j=0; j<matrix[0].size(); j++){
        unsigned long s = 0;
        for (unsigned int i=0; i<matrix.size(); i++){
            s += matrix[i][j] << (matrix.size() - i -1);
        }
        res[j] = s;
    }
    return res;
}

std::vector<BinaryMatrix> interlace(const std::vector<BinaryMatrix>& matrices, unsigned int interlacing){
    std::vector<BinaryMatrix> res;
    unsigned int dim = matrices.size() / interlacing;
    for (unsigned int j=0; j < dim; j++){
        BinaryMatrix mat;
        for (unsigned int i=0; i < matrices[0].size(); i++){
            for (unsigned int d=0; d<interlacing; d++){
                mat.push_back(matrices[j*interlacing+d][i]);
            }
        }
        res.push_back(mat);
    }
    return res;
}


std::vector<std::vector<double>> points(const std::vector<BinaryMatrix>& matrices, const std::vector<unsigned int>& graycode){
    std::vector<std::vector<double>> points;
    unsigned int nbPoints = numPoints(matrices[0]);
    for (unsigned int i=0; i<nbPoints; i++){
        points.push_back(std::vector<double>());
    }

    for (unsigned int j=0; j < matrices.size(); j++){
        BinaryMatrix matrix = matrices[j];
        std::vector<unsigned long> cols = getColsReverse(matrix);
        unsigned long m_permutation = 0;
        points[0].push_back(0);
        for (unsigned int i=1; i<nbPoints; ++i){
            m_permutation = m_permutation ^ cols[graycode[i-1]];
            points[i].push_back(((double) m_permutation) / pow(2, matrices[0].size()));
        }
    }
    return points;
}

int main(){
    std::vector<BinaryMatrix> matrices = {{ matrices }};
    unsigned int m = matrices[0][0].size();
    unsigned int interlacing = {{interlacing}};
    matrices = interlace(matrices, interlacing);

    std::vector<unsigned int> graycode = std::vector<unsigned int>();
    for(unsigned int i=0; i < pow(2, m); i++){
            graycode.push_back(getmsb(((i >> 1) ^ i)^(((i+1) >> 1) ^ (i+1))));
    }


    std::vector<std::vector<double>> myPoints = points(matrices, graycode);
    for (unsigned int i=0; i<myPoints.size(); i++){
        for (unsigned int j=0; j<myPoints[0].size(); j++){
            std::cout << myPoints[i][j] << " ";
        }
        std::cout << std::endl;
    }
}

